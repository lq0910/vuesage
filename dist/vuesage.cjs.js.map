{"version":3,"file":"vuesage.cjs.js","sources":["../src/tools/index.js","../src/tools/analyzer.js","../src/tools/fixer.js","../src/config.js","../src/index.js","../src/service.js"],"sourcesContent":["/**\n * 检查是否为有效的Vue组件代码\n * @param {string} code Vue组件代码\n * @returns {boolean} 是否有效\n */\nexport function isValidVueComponent(code) {\n  try {\n    // 检查基本结构\n    const hasTemplate = /<template>[\\s\\S]*<\\/template>/.test(code);\n    const hasScript = /<script>[\\s\\S]*<\\/script>/.test(code);\n    return hasTemplate && hasScript;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * 提取template部分的代码\n * @param {string} code Vue组件代码\n * @returns {string} template代码\n */\nexport function extractTemplate(code) {\n  const match = code.match(/<template>([\\s\\S]*)<\\/template>/);\n  return match ? match[1].trim() : '';\n}\n\n/**\n * 提取script部分的代码\n * @param {string} code Vue组件代码\n * @returns {string} script代码\n */\nexport function extractScript(code) {\n  const match = code.match(/<script>([\\s\\S]*)<\\/script>/);\n  return match ? match[1].trim() : '';\n}\n\n/**\n * 提取styles部分的代码\n * @param {string} code Vue组件代码\n * @returns {Array} styles代码数组\n */\nexport function extractStyles(code) {\n  const styles = [];\n  const styleRegex = /<style\\b[^>]*>([\\s\\S]*?)<\\/style>/g;\n  let match;\n\n  while ((match = styleRegex.exec(code)) !== null) {\n    const [fullMatch, content] = match;\n    const scoped = fullMatch.includes('scoped');\n    styles.push({ content: content.trim(), scoped });\n  }\n\n  return styles;\n}\n\n/**\n * 合并Vue组件的各个部分\n * @param {string} template template代码\n * @param {string} script script代码\n * @param {Array} styles styles代码数组\n * @returns {string} 完整的Vue组件代码\n */\nexport function mergeVueComponent(template, script, styles) {\n  const templatePart = template ? `<template>\\n${template}\\n</template>\\n\\n` : '';\n  const scriptPart = script ? `<script>\\n${script}\\n</script>\\n\\n` : '';\n  const stylesPart = styles.map(style => \n    `<style${style.scoped ? ' scoped' : ''}>\\n${style.content}\\n</style>`\n  ).join('\\n\\n');\n\n  return `${templatePart}${scriptPart}${stylesPart}`.trim();\n} ","import { isValidVueComponent, extractTemplate, extractScript, extractStyles } from './index.js';\n\n/**\n * Vue组件代码分析器\n */\nexport class VueAnalyzer {\n  constructor(options = {}) {\n    this.options = {\n      maxLineLength: options.maxLineLength || 80,\n      requireComponentName: options.requireComponentName !== false,\n      requirePropsType: options.requirePropsType !== false,\n      requirePropsDefault: options.requirePropsDefault !== false,\n      requireVForKey: options.requireVForKey !== false,\n      requireScopedStyle: options.requireScopedStyle !== false,\n      maxMethodLines: options.maxMethodLines || 20,\n      maxMethods: options.maxMethods || 10,\n      maxNestingDepth: options.maxNestingDepth || 3,\n      ...options\n    };\n  }\n\n  /**\n   * 分析Vue组件代码\n   * @param {string} component Vue组件代码\n   * @returns {Object} 分析结果\n   */\n  analyze(component) {\n    if (!isValidVueComponent(component)) {\n      return {\n        success: false,\n        summary: '无效的 Vue 组件代码',\n        issues: [{\n          type: 'error',\n          message: '代码必须包含 <template> 和 <script> 标签'\n        }]\n      };\n    }\n\n    const template = extractTemplate(component);\n    const script = extractScript(component);\n    const styles = extractStyles(component);\n\n    const issues = [\n      ...this.analyzeTemplate(template),\n      ...this.analyzeScript(script),\n      ...this.analyzeStyles(styles),\n      ...this.analyzeLifecycle(script),\n      ...this.analyzeComplexity(script),\n      ...this.analyzePerformance(template, script)\n    ];\n\n    return {\n      success: issues.length === 0,\n      summary: issues.length ? `发现 ${issues.length} 个问题` : '组件代码符合规范',\n      issues\n    };\n  }\n\n  /**\n   * 分析template部分\n   * @param {string} template 模板代码\n   * @returns {Array} 问题列表\n   */\n  analyzeTemplate(template) {\n    const issues = [];\n    \n    // 检查 v-for 指令是否有对应的 :key 绑定\n    if (this.options.requireVForKey) {\n      const vForRegex = /v-for\\s*=\\s*[\"'][^\"']+[\"']/g;\n      const keyRegex = /:key\\s*=\\s*[\"'][^\"']+[\"']/g;\n      \n      const vForMatches = template.match(vForRegex) || [];\n      const keyMatches = template.match(keyRegex) || [];\n      \n      if (vForMatches.length > keyMatches.length) {\n        issues.push({\n          type: 'warning',\n          message: '使用 v-for 指令时必须绑定 key 属性',\n          fix: 'addVForKey'\n        });\n      }\n    }\n\n    // 检查过长的代码行\n    const lines = template.split('\\n');\n    lines.forEach((line, index) => {\n      if (line.length > this.options.maxLineLength) {\n        issues.push({\n          type: 'style',\n          message: `第 ${index + 1} 行超过 ${this.options.maxLineLength} 个字符`,\n          fix: 'formatLongLine',\n          line: index + 1\n        });\n      }\n    });\n\n    return issues;\n  }\n\n  /**\n   * 分析script部分\n   * @param {string} script 脚本代码\n   * @returns {Array} 问题列表\n   */\n  analyzeScript(script) {\n    const issues = [];\n\n    // 检查组件是否有 name 属性\n    if (this.options.requireComponentName) {\n      if (!script.includes('name:') && !script.includes('name :')) {\n        issues.push({\n          type: 'warning',\n          message: '组件缺少 name 属性',\n          fix: 'addComponentName'\n        });\n      }\n    }\n\n    // 检查 props 是否有类型定义\n    if (this.options.requirePropsType) {\n      const propsMatch = script.match(/props\\s*:\\s*{([^}]+)}/);\n      if (propsMatch) {\n        const propsContent = propsMatch[1];\n        const propLines = propsContent.split(',').map(line => line.trim());\n        \n        propLines.forEach(line => {\n          if (line && !line.includes('type:')) {\n            issues.push({\n              type: 'warning',\n              message: 'props 属性缺少类型定义',\n              fix: 'addPropsType',\n              prop: line.split(':')[0].trim()\n            });\n          }\n        });\n      }\n    }\n\n    // 检查 props 是否有默认值\n    if (this.options.requirePropsDefault) {\n      const propsMatch = script.match(/props\\s*:\\s*{([^}]+)}/);\n      if (propsMatch) {\n        const propsContent = propsMatch[1];\n        const propLines = propsContent.split(',').map(line => line.trim());\n        \n        propLines.forEach(line => {\n          if (line && !line.includes('default:')) {\n            issues.push({\n              type: 'warning',\n              message: 'props 属性缺少默认值',\n              fix: 'addPropsDefault',\n              prop: line.split(':')[0].trim()\n            });\n          }\n        });\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * 检查styles部分\n   * @param {Array} styles 样式代码数组\n   * @returns {Array} 问题列表\n   */\n  analyzeStyles(styles) {\n    const issues = [];\n\n    // 检查是否使用 scoped 样式\n    if (this.options.requireScopedStyle && styles.length > 0) {\n      const hasScoped = styles.some(style => style.scoped);\n      if (!hasScoped) {\n        issues.push({\n          type: 'warning',\n          message: '建议使用 scoped 样式以避免样式污染',\n          fix: 'addScopedStyle'\n        });\n      }\n    }\n\n    return issues;\n  }\n\n  /**\n   * 分析生命周期方法\n   */\n  analyzeLifecycle(script) {\n    const issues = [];\n    \n    // 检查废弃的生命周期方法\n    const deprecatedHooks = {\n      beforeDestroy: 'beforeUnmount',\n      destroyed: 'unmounted'\n    };\n\n    Object.keys(deprecatedHooks).forEach(hook => {\n      if (script.includes(hook + ':') || script.includes(hook + ' :')) {\n        issues.push({\n          type: 'warning',\n          message: `建议使用 ${deprecatedHooks[hook]} 替代废弃的 ${hook} 生命周期方法`,\n          fix: 'updateLifecycle',\n          oldHook: hook,\n          newHook: deprecatedHooks[hook]\n        });\n      }\n    });\n\n    // 检查生命周期方法中的异步操作\n    const asyncInMountRegex = /async\\s+mounted\\s*\\(\\)/;\n    if (asyncInMountRegex.test(script)) {\n      issues.push({\n        type: 'warning',\n        message: '不建议在 mounted 中直接使用 async/await，可能导致组件渲染延迟',\n        fix: 'refactorAsyncMount'\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * 分析代码复杂度\n   */\n  analyzeComplexity(script) {\n    const issues = [];\n\n    // 检查方法行数\n    const methodRegex = /\\w+\\s*\\([^)]*\\)\\s*{([^}]*)}/g;\n    let match;\n    while ((match = methodRegex.exec(script)) !== null) {\n      const methodBody = match[1];\n      const lines = methodBody.split('\\n').length;\n      \n      if (lines > this.options.maxMethodLines) {\n        issues.push({\n          type: 'warning',\n          message: `方法过长（${lines}行），建议不超过${this.options.maxMethodLines}行`,\n          fix: 'splitMethod'\n        });\n      }\n    }\n\n    // 检查方法总数\n    const methodCount = (script.match(/\\w+\\s*\\([^)]*\\)\\s*{/g) || []).length;\n    if (methodCount > this.options.maxMethods) {\n      issues.push({\n        type: 'warning',\n        message: `组件方法过多（${methodCount}个），建议不超过${this.options.maxMethods}个`,\n        fix: 'extractMixin'\n      });\n    }\n\n    // 检查模板嵌套深度\n    const maxDepth = this.getTemplateMaxDepth(script);\n    if (maxDepth > this.options.maxNestingDepth) {\n      issues.push({\n        type: 'warning',\n        message: `模板嵌套深度过高（${maxDepth}层），建议不超过${this.options.maxNestingDepth}层`,\n        fix: 'extractComponent'\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * 分析性能相关问题\n   */\n  analyzePerformance(template, script) {\n    const issues = [];\n\n    // 检查大量v-if和v-show混用\n    const vIfCount = (template.match(/v-if/g) || []).length;\n    const vShowCount = (template.match(/v-show/g) || []).length;\n    \n    if (vIfCount > 3 && vShowCount > 3) {\n      issues.push({\n        type: 'performance',\n        message: '过多混用 v-if 和 v-show 可能影响性能，建议统一使用一种方式',\n        fix: 'optimizeToggle'\n      });\n    }\n\n    // 检查计算属性中的复杂计算\n    const computedRegex = /computed:\\s*{([^}]+)}/;\n    const computedMatch = script.match(computedRegex);\n    if (computedMatch) {\n      const computedBody = computedMatch[1];\n      if (computedBody.includes('filter(') || computedBody.includes('map(') || computedBody.includes('reduce(')) {\n        issues.push({\n          type: 'performance',\n          message: '计算属性中包含复杂数组操作，建议使用缓存或提前处理',\n          fix: 'optimizeComputed'\n        });\n      }\n    }\n\n    // 检查大量的数据监听\n    const watchCount = (script.match(/watch:/g) || []).length;\n    if (watchCount > 5) {\n      issues.push({\n        type: 'performance',\n        message: `组件包含大量的 watch（${watchCount}个），可能影响性能`,\n        fix: 'optimizeWatch'\n      });\n    }\n\n    return issues;\n  }\n\n  /**\n   * 获取模板最大嵌套深度\n   */\n  getTemplateMaxDepth(template) {\n    let maxDepth = 0;\n    let currentDepth = 0;\n    \n    for (const char of template) {\n      if (char === '<' && template[template.indexOf(char) + 1] !== '/') {\n        currentDepth++;\n        maxDepth = Math.max(maxDepth, currentDepth);\n      } else if (char === '<' && template[template.indexOf(char) + 1] === '/') {\n        currentDepth--;\n      }\n    }\n    \n    return maxDepth;\n  }\n} ","import { isValidVueComponent, extractTemplate, extractScript, extractStyles, mergeVueComponent } from './index.js';\n\n/**\n * Vue组件代码修复器\n */\nexport class VueFixer {\n  constructor(config = {}) {\n    this.config = {\n      formatOptions: {\n        indent: config.indent || 2,\n        maxLineLength: config.maxLineLength || 80\n      },\n      ...config\n    };\n  }\n\n  /**\n   * 修复Vue组件代码\n   * @param {string} component Vue组件代码\n   * @param {Array} issues 需要修复的问题列表\n   * @returns {Object} 修复结果\n   */\n  fix(component, issues) {\n    if (!isValidVueComponent(component)) {\n      return {\n        success: false,\n        error: '无效的Vue组件代码'\n      };\n    }\n\n    let template = extractTemplate(component);\n    let script = extractScript(component);\n    let styles = extractStyles(component);\n    \n    const repairs = [];\n\n    // 修复模板问题\n    issues.filter(issue => issue.type === 'template').forEach(issue => {\n      const repair = this.fixTemplate(template, issue);\n      if (repair.success) {\n        template = repair.code;\n        repairs.push(repair);\n      }\n    });\n\n    // 修复脚本问题\n    issues.filter(issue => issue.type === 'script' || issue.type === 'props').forEach(issue => {\n      const repair = this.fixScript(script, issue);\n      if (repair.success) {\n        script = repair.code;\n        repairs.push(repair);\n      }\n    });\n\n    // 修复样式问题\n    issues.filter(issue => issue.type === 'style').forEach(issue => {\n      const repair = this.fixStyles(styles, issue);\n      if (repair.success) {\n        styles = repair.styles;\n        repairs.push(repair);\n      }\n    });\n\n    // 合并修复后的代码\n    const fixedCode = mergeVueComponent(template, script, styles);\n\n    return {\n      success: true,\n      code: fixedCode,\n      repairs\n    };\n  }\n\n  fixTemplate(template, issue) {\n    switch (issue.message) {\n      case 'v-for指令必须绑定key':\n        return this.addVForKey(template);\n      case /第\\d+行超过\\d+个字符/.test(issue.message) && issue.message:\n        return this.formatLongLine(template, issue);\n      default:\n        return {\n          success: false,\n          error: '不支持的修复类型'\n        };\n    }\n  }\n\n  fixScript(script, issue) {\n    switch (issue.message) {\n      case '组件缺少name属性':\n        return this.addComponentName(script);\n      case 'props必须定义类型':\n        return this.addPropsType(script);\n      case 'props建议设置默认值':\n        return this.addPropsDefault(script);\n      default:\n        return {\n          success: false,\n          error: '不支持的修复类型'\n        };\n    }\n  }\n\n  fixStyles(styles, issue) {\n    // 如果没有样式，添加一个空的scoped样式块\n    if (!styles || styles.length === 0) {\n      return {\n        success: true,\n        styles: [{\n          content: '',\n          scoped: true\n        }],\n        message: '添加了scoped样式块'\n      };\n    }\n    return {\n      success: false,\n      error: '不支持的样式修复类型'\n    };\n  }\n\n  addVForKey(template) {\n    const vForRegex = /<([^>]+)v-for=[\"']([^\"']+)[\"']([^>]*)>/g;\n    let fixedTemplate = template;\n    let match;\n    let fixed = false;\n\n    while ((match = vForRegex.exec(template)) !== null) {\n      const [fullMatch, beforeVFor, vForExpr, afterVFor] = match;\n      if (!afterVFor.includes(':key') && !afterVFor.includes('v-bind:key')) {\n        const item = vForExpr.split(' in ')[0].trim();\n        const newElement = `<${beforeVFor}v-for=\"${vForExpr}\" :key=\"${item}\"${afterVFor}>`;\n        fixedTemplate = fixedTemplate.replace(fullMatch, newElement);\n        fixed = true;\n      }\n    }\n\n    return {\n      success: fixed,\n      code: fixedTemplate,\n      message: fixed ? '添加了v-for的key绑定' : '无需修复v-for的key绑定'\n    };\n  }\n\n  addComponentName(script) {\n    const exportDefaultRegex = /export\\s+default\\s*{/;\n    if (!script.includes('name:')) {\n      const componentName = this.generateComponentName();\n      const fixedScript = script.replace(\n        exportDefaultRegex,\n        `export default {\\n  name: '${componentName}',`\n      );\n      return {\n        success: true,\n        code: fixedScript,\n        message: `添加了组件名称: ${componentName}`\n      };\n    }\n    return {\n      success: false,\n      message: '组件已有name属性'\n    };\n  }\n\n  addPropsType(script) {\n    const propsRegex = /props:\\s*{([^}]+)}/;\n    const match = script.match(propsRegex);\n    if (match) {\n      let propsContent = match[1];\n      const propLines = propsContent.split(',').map(line => line.trim());\n      const fixedProps = propLines.map(line => {\n        if (line && !line.includes('type:')) {\n          const propName = line.split(':')[0].trim();\n          return `${propName}: { type: String }`;\n        }\n        return line;\n      });\n      const fixedScript = script.replace(\n        propsRegex,\n        `props: {\\n    ${fixedProps.join(',\\n    ')}\\n  }`\n      );\n      return {\n        success: true,\n        code: fixedScript,\n        message: '为props添加了类型定义'\n      };\n    }\n    return {\n      success: false,\n      message: '未找到props定义'\n    };\n  }\n\n  addPropsDefault(script) {\n    const propsRegex = /props:\\s*{([^}]+)}/;\n    const match = script.match(propsRegex);\n    if (match) {\n      let propsContent = match[1];\n      const propLines = propsContent.split(',').map(line => line.trim());\n      const fixedProps = propLines.map(line => {\n        if (line && !line.includes('default:')) {\n          const [propName, propDef] = line.split(':').map(part => part.trim());\n          if (propDef.includes('type:')) {\n            const typeMatch = propDef.match(/type:\\s*([^,}]+)/);\n            if (typeMatch) {\n              const type = typeMatch[1].trim();\n              return `${propName}: { ${propDef}, default: ${this.getDefaultValueForType(type)} }`;\n            }\n          }\n        }\n        return line;\n      });\n      const fixedScript = script.replace(\n        propsRegex,\n        `props: {\\n    ${fixedProps.join(',\\n    ')}\\n  }`\n      );\n      return {\n        success: true,\n        code: fixedScript,\n        message: '为props添加了默认值'\n      };\n    }\n    return {\n      success: false,\n      message: '未找到props定义'\n    };\n  }\n\n  formatLongLine(template, issue) {\n    // 简单的格式化策略：在属性之间换行\n    const lines = template.split('\\n');\n    const lineNumber = parseInt(issue.message.match(/第(\\d+)行/)[1]) - 1;\n    const line = lines[lineNumber];\n    \n    if (line.length > 80) {\n      const formattedLine = line.replace(/(\\s+\\w+=\"[^\"]*\")/g, '\\n  $1');\n      lines[lineNumber] = formattedLine;\n      return {\n        success: true,\n        code: lines.join('\\n'),\n        message: '格式化了过长的行'\n      };\n    }\n    \n    return {\n      success: false,\n      message: '行长度正常，无需格式化'\n    };\n  }\n\n  generateComponentName() {\n    // 生成一个随机的组件名\n    const prefix = 'Vue';\n    const suffix = Math.random().toString(36).substring(2, 8);\n    return prefix + suffix.charAt(0).toUpperCase() + suffix.slice(1);\n  }\n\n  getDefaultValueForType(type) {\n    switch (type.trim()) {\n      case 'String':\n        return \"''\";\n      case 'Number':\n        return '0';\n      case 'Boolean':\n        return 'false';\n      case 'Array':\n        return '[]';\n      case 'Object':\n        return '{}';\n      default:\n        return 'null';\n    }\n  }\n\n  /**\n   * 更新生命周期方法\n   */\n  updateLifecycle(script, issue) {\n    const { oldHook, newHook } = issue;\n    const hookRegex = new RegExp(`${oldHook}\\\\s*:\\\\s*`, 'g');\n    const fixedScript = script.replace(hookRegex, `${newHook}: `);\n    \n    return {\n      success: true,\n      code: fixedScript,\n      message: `将 ${oldHook} 更新为 ${newHook}`\n    };\n  }\n\n  /**\n   * 重构异步的 mounted 方法\n   */\n  refactorAsyncMount(script) {\n    const mountedRegex = /(async\\s+)?mounted\\s*\\(\\)\\s*{([^}]*)}/;\n    const match = script.match(mountedRegex);\n    \n    if (match) {\n      const mountedBody = match[2];\n      const fixedBody = mountedBody.replace(\n        /await\\s+([^;]+)/g,\n        `this.$nextTick(async () => { await $1 })`\n      );\n      \n      const fixedScript = script.replace(\n        mountedRegex,\n        `mounted() {${fixedBody}}`\n      );\n      \n      return {\n        success: true,\n        code: fixedScript,\n        message: '重构了 mounted 中的异步操作'\n      };\n    }\n    \n    return {\n      success: false,\n      message: '未找到需要重构的 mounted 方法'\n    };\n  }\n\n  /**\n   * 智能分析并优化计算属性\n   */\n  optimizeComputed(script) {\n    const computedRegex = /computed:\\s*{([^}]+)}/;\n    const match = script.match(computedRegex);\n    \n    if (match) {\n      const computedBody = match[1];\n      const fixedBody = computedBody.replace(\n        /(\\w+)\\s*\\(\\)\\s*{([^}]+)}/g,\n        (match, name, body) => {\n          // 检查是否包含数组操作\n          const hasArrayOps = body.includes('filter(') || \n                            body.includes('map(') || \n                            body.includes('reduce(');\n          \n          // 检查是否依赖其他计算属性\n          const dependsOnComputed = this.checkComputedDependencies(body, computedBody);\n          \n          // 检查是否有复杂条件判断\n          const hasComplexConditions = (body.match(/if|else|switch|case/g) || []).length > 2;\n          \n          // 根据情况优化\n          if (hasArrayOps || dependsOnComputed || hasComplexConditions) {\n            // 使用缓存\n            const optimizedBody = this.optimizeComputedBody(body);\n            return `${name}: {\n      cache: true,\n      get() {${optimizedBody}},\n      // 添加依赖追踪\n      dependencies: [${this.extractDependencies(body)}]\n    }`;\n          }\n          return match;\n        }\n      );\n      \n      const fixedScript = script.replace(\n        computedRegex,\n        `computed: {${fixedBody}}`\n      );\n      \n      return {\n        success: true,\n        code: fixedScript,\n        message: '优化了计算属性的性能'\n      };\n    }\n    \n    return {\n      success: false,\n      message: '未找到需要优化的计算属性'\n    };\n  }\n\n  /**\n   * 优化计算属性的实现\n   */\n  optimizeComputedBody(body) {\n    // 提取数组操作链\n    const chainMatch = body.match(/(\\w+)\\.(filter|map|reduce).*?(?=;|\\}|$)/g);\n    if (chainMatch) {\n      // 优化数组操作链\n      const optimized = chainMatch.map(chain => {\n        // 将多个操作合并为一个循环\n        if (chain.includes('.filter(') && chain.includes('.map(')) {\n          return this.combineArrayOperations(chain);\n        }\n        // 添加长度检查以提前返回\n        if (chain.includes('.filter(')) {\n          return `const arr = ${chain.split('.')[0]};\n      if (!arr || arr.length === 0) return [];\n      ${chain}`;\n        }\n        return chain;\n      });\n      \n      return optimized.join('\\n');\n    }\n    \n    return body;\n  }\n\n  /**\n   * 合并数组操作\n   */\n  combineArrayOperations(chain) {\n    const parts = chain.split('.');\n    const array = parts[0];\n    const operations = parts.slice(1);\n    \n    // 提取 filter 和 map 的条件\n    const filterCondition = operations.find(op => op.includes('filter('))\n      ?.match(/filter\\((.*?)\\)/)[1];\n    const mapTransform = operations.find(op => op.includes('map('))\n      ?.match(/map\\((.*?)\\)/)[1];\n    \n    // 合并为单次遍历\n    return `${array}.reduce((acc, item) => {\n      if (${filterCondition}) {\n        acc.push(${mapTransform});\n      }\n      return acc;\n    }, [])`;\n  }\n\n  /**\n   * 检查计算属性的依赖关系\n   */\n  checkComputedDependencies(body, allComputed) {\n    const computedProps = allComputed.match(/\\w+\\s*\\(\\)/g) || [];\n    return computedProps.some(prop => \n      body.includes(prop.replace('()', ''))\n    );\n  }\n\n  /**\n   * 提取计算属性的依赖\n   */\n  extractDependencies(body) {\n    const deps = new Set();\n    \n    // 提取 this. 引用\n    const thisRefs = body.match(/this\\.(\\w+)/g) || [];\n    thisRefs.forEach(ref => {\n      deps.add(`'${ref.replace('this.', '')}'`);\n    });\n    \n    // 提取 props 引用\n    const propsRefs = body.match(/props\\.(\\w+)/g) || [];\n    propsRefs.forEach(ref => {\n      deps.add(`'${ref.replace('props.', '')}'`);\n    });\n    \n    return Array.from(deps).join(', ');\n  }\n\n  /**\n   * 智能优化 v-if 和 v-show 的使用\n   */\n  optimizeToggle(template) {\n    // 分析条件的复杂度和使用频率\n    const conditions = new Map();\n    const vIfRegex = /v-if=\"([^\"]+)\"/g;\n    let match;\n    \n    while ((match = vIfRegex.exec(template)) !== null) {\n      const condition = match[1];\n      conditions.set(condition, {\n        complexity: this.analyzeConditionComplexity(condition),\n        frequency: this.estimateToggleFrequency(condition)\n      });\n    }\n    \n    // 根据分析结果优化\n    let fixedTemplate = template;\n    conditions.forEach((analysis, condition) => {\n      if (analysis.complexity < 3 && analysis.frequency > 0.7) {\n        // 频繁切换且条件简单的使用 v-show\n        fixedTemplate = fixedTemplate.replace(\n          new RegExp(`v-if=\"${condition}\"`, 'g'),\n          `v-show=\"${condition}\"`\n        );\n      }\n    });\n    \n    return {\n      success: true,\n      code: fixedTemplate,\n      message: '智能优化了条件渲染指令的使用'\n    };\n  }\n\n  /**\n   * 分析条件的复杂度\n   */\n  analyzeConditionComplexity(condition) {\n    let complexity = 0;\n    \n    // 逻辑运算符增加复杂度\n    complexity += (condition.match(/&&|\\|\\|/g) || []).length;\n    \n    // 函数调用增加复杂度\n    complexity += (condition.match(/\\w+\\(/g) || []).length;\n    \n    // 三元运算符增加复杂度\n    complexity += (condition.match(/\\?/g) || []).length * 2;\n    \n    return complexity;\n  }\n\n  /**\n   * 估计切换频率\n   */\n  estimateToggleFrequency(condition) {\n    // 基于条件表达式估计切换频率\n    if (condition.includes('loading')) return 0.9;\n    if (condition.includes('visible') || condition.includes('show')) return 0.8;\n    if (condition.includes('active') || condition.includes('selected')) return 0.7;\n    if (condition.includes('error') || condition.includes('valid')) return 0.5;\n    return 0.3;\n  }\n\n  /**\n   * 智能拆分方法\n   */\n  splitMethod(script, issue) {\n    const methodRegex = /(\\w+)\\s*\\([^)]*\\)\\s*{([^}]*)}/;\n    const match = script.match(methodRegex);\n    \n    if (match) {\n      const [fullMatch, methodName, methodBody] = match;\n      const lines = methodBody.split('\\n');\n      \n      if (lines.length > this.config.formatOptions.maxLineLength) {\n        // 分析方法的逻辑结构\n        const blocks = this.analyzeMethodBlocks(methodBody);\n        \n        // 根据逻辑块拆分方法\n        const { mainMethod, helperMethods } = this.splitMethodByBlocks(\n          methodName,\n          blocks\n        );\n        \n        // 替换原方法\n        const fixedScript = script.replace(\n          fullMatch,\n          `${mainMethod}\\n${helperMethods.join('\\n')}`\n        );\n        \n        return {\n          success: true,\n          code: fixedScript,\n          message: `将 ${methodName} 方法智能拆分为多个方法`\n        };\n      }\n    }\n    \n    return {\n      success: false,\n      message: '未找到需要拆分的方法'\n    };\n  }\n\n  /**\n   * 分析方法的逻辑块\n   */\n  analyzeMethodBlocks(methodBody) {\n    const blocks = [];\n    let currentBlock = {\n      lines: [],\n      type: 'unknown',\n      complexity: 0\n    };\n    \n    const lines = methodBody.split('\\n');\n    lines.forEach(line => {\n      // 识别逻辑块的类型\n      if (line.includes('if') || line.includes('switch')) {\n        if (currentBlock.lines.length > 0) {\n          blocks.push(currentBlock);\n        }\n        currentBlock = {\n          lines: [line],\n          type: 'condition',\n          complexity: 1\n        };\n      } else if (line.includes('for') || line.includes('while')) {\n        if (currentBlock.lines.length > 0) {\n          blocks.push(currentBlock);\n        }\n        currentBlock = {\n          lines: [line],\n          type: 'loop',\n          complexity: 2\n        };\n      } else if (line.includes('try') || line.includes('catch')) {\n        if (currentBlock.lines.length > 0) {\n          blocks.push(currentBlock);\n        }\n        currentBlock = {\n          lines: [line],\n          type: 'error_handling',\n          complexity: 1\n        };\n      } else {\n        currentBlock.lines.push(line);\n        // 更新块的复杂度\n        if (line.includes('&&') || line.includes('||')) {\n          currentBlock.complexity++;\n        }\n      }\n    });\n    \n    if (currentBlock.lines.length > 0) {\n      blocks.push(currentBlock);\n    }\n    \n    return blocks;\n  }\n\n  /**\n   * 根据逻辑块拆分方法\n   */\n  splitMethodByBlocks(methodName, blocks) {\n    const helperMethods = [];\n    let mainMethodLines = [];\n    \n    blocks.forEach((block, index) => {\n      if (block.complexity > 1 || block.lines.length > 5) {\n        // 创建辅助方法\n        const helperName = `${methodName}${this.getHelperSuffix(block.type)}${index + 1}`;\n        const helperMethod = `\n  ${helperName}() {\n    ${block.lines.join('\\n    ')}\n  }`;\n        helperMethods.push(helperMethod);\n        mainMethodLines.push(`    this.${helperName}();`);\n      } else {\n        mainMethodLines.push(...block.lines);\n      }\n    });\n    \n    const mainMethod = `\n  ${methodName}() {\n    ${mainMethodLines.join('\\n    ')}\n  }`;\n    \n    return { mainMethod, helperMethods };\n  }\n\n  /**\n   * 获取辅助方法的后缀\n   */\n  getHelperSuffix(blockType) {\n    switch (blockType) {\n      case 'condition':\n        return 'Condition';\n      case 'loop':\n        return 'Process';\n      case 'error_handling':\n        return 'ErrorHandler';\n      default:\n        return 'Helper';\n    }\n  }\n\n  /**\n   * 提取组件\n   */\n  extractComponent(template, issue) {\n    const componentName = this.generateComponentName();\n    const templateRegex = /<template>([\\s\\S]*)<\\/template>/;\n    const match = template.match(templateRegex);\n    \n    if (match) {\n      const templateContent = match[1];\n      // 找到嵌套最深的部分\n      const deepestNesting = this.findDeepestNesting(templateContent);\n      \n      if (deepestNesting) {\n        // 创建新组件\n        const newComponent = `\n<template>\n  ${deepestNesting}\n</template>\n\n<script>\nexport default {\n  name: '${componentName}'\n}\n</script>`;\n        \n        // 在原模板中使用新组件\n        const fixedTemplate = template.replace(\n          deepestNesting,\n          `<${componentName} />`\n        );\n        \n        return {\n          success: true,\n          code: fixedTemplate,\n          newComponent,\n          message: `提取了嵌套组件到新文件 ${componentName}.vue`\n        };\n      }\n    }\n    \n    return {\n      success: false,\n      message: '未找到需要提取的嵌套组件'\n    };\n  }\n\n  /**\n   * 查找最深嵌套的模板部分\n   */\n  findDeepestNesting(template) {\n    const elements = template.match(/<[^>]+>([^<]*(?:(?!<\\/).)*?)<\\/[^>]+>/g) || [];\n    let deepestElement = '';\n    let maxDepth = 0;\n    \n    elements.forEach(element => {\n      const depth = (element.match(/</g) || []).length;\n      if (depth > maxDepth) {\n        maxDepth = depth;\n        deepestElement = element;\n      }\n    });\n    \n    return deepestElement;\n  }\n} ","const fs = require('fs');\nconst path = require('path');\nconst _ = require('lodash');\n\n// 默认配置\nconst defaultConfig = {\n  server: {\n    port: 6188,\n    host: 'localhost'\n  },\n  rules: {\n    naming: {\n      enabled: true,\n      severity: 'error',\n      options: {\n        componentPrefix: 'App',\n        propsCasing: 'camelCase'\n      }\n    },\n    props: {\n      enabled: true,\n      severity: 'warning',\n      options: {\n        requireType: true,\n        requireDefault: true\n      }\n    },\n    lifecycle: {\n      enabled: true,\n      severity: 'error',\n      options: {\n        checkDeprecated: true\n      }\n    },\n    template: {\n      enabled: true,\n      severity: 'error',\n      options: {\n        maxLength: 80,\n        requireKey: true\n      }\n    },\n    complexity: {\n      enabled: true,\n      severity: 'warning',\n      options: {\n        maxMethodLines: 20,\n        maxMethods: 10\n      }\n    },\n    style: {\n      enabled: true,\n      severity: 'warning',\n      options: {\n        enforceScoped: true,\n        maxNestingDepth: 3\n      }\n    }\n  },\n  autofix: {\n    safeMode: true,\n    backup: true,\n    ignoreFiles: ['dist/**/*', 'node_modules/**/*']\n  },\n  formatting: {\n    indentSize: 2,\n    maxLineLength: 100,\n    singleQuote: true\n  }\n};\n\n// 加载用户配置\nfunction loadConfig(configPath = '.vuesagerc.json') {\n  try {\n    const userConfigPath = path.resolve(process.cwd(), configPath);\n    if (fs.existsSync(userConfigPath)) {\n      const userConfig = JSON.parse(fs.readFileSync(userConfigPath, 'utf8'));\n      return _.merge({}, defaultConfig, userConfig);\n    }\n  } catch (error) {\n    console.warn(`Warning: Could not load config file: ${error.message}`);\n  }\n  return defaultConfig;\n}\n\n// 验证规则配置\nfunction validateRuleConfig(rule, config) {\n  if (!config.enabled) return false;\n  \n  const severity = config.severity.toLowerCase();\n  if (severity === 'off') return false;\n  \n  return true;\n}\n\n// 获取规则配置\nfunction getRuleConfig(ruleName) {\n  const config = loadConfig();\n  const ruleConfig = config.rules[ruleName];\n  \n  if (!ruleConfig || !validateRuleConfig(ruleName, ruleConfig)) {\n    return null;\n  }\n  \n  return {\n    ...ruleConfig,\n    severity: ruleConfig.severity.toLowerCase()\n  };\n}\n\n// 获取自动修复配置\nfunction getAutofixConfig() {\n  const config = loadConfig();\n  return config.autofix;\n}\n\n// 获取格式化配置\nfunction getFormattingConfig() {\n  const config = loadConfig();\n  return config.formatting;\n}\n\nconst config = {\n  server: {\n    port: 6188,\n    host: 'localhost'\n  },\n  rules: {\n    naming: {\n      enabled: true,\n      severity: 'error',\n      options: {\n        componentPrefix: 'App',\n        propsCasing: 'camelCase'\n      }\n    },\n    props: {\n      enabled: true,\n      severity: 'warning',\n      options: {\n        requireType: true,\n        requireDefault: true\n      }\n    },\n    template: {\n      enabled: true,\n      severity: 'error',\n      options: {\n        maxLength: 80,\n        requireKey: true\n      }\n    }\n  },\n  autofix: {\n    safeMode: true,\n    backup: true,\n    ignoreFiles: ['dist/**/*', 'node_modules/**/*']\n  },\n  formatting: {\n    indentSize: 2,\n    maxLineLength: 100,\n    singleQuote: true\n  }\n};\n\nexport { config }; ","import express from 'express';\nimport { VueSageService } from './service.js';\nimport { config } from './config.js';\nimport { VueAnalyzer } from './tools/analyzer.js';\nimport { VueFixer } from './tools/fixer.js';\nimport * as utils from './tools/index.js';\n\nconst app = express();\nconst vueSage = new VueSageService();\n\napp.use(express.json());\napp.use(express.static('public'));\n\n// 分析接口\napp.post('/analyze', async (req, res) => {\n  try {\n    const { component } = req.body;\n    const result = await vueSage.analyze(component);\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 修复接口\napp.post('/fix', async (req, res) => {\n  try {\n    const { component, issues } = req.body;\n    const result = await vueSage.fix(component, issues);\n    res.json(result);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// 启动服务器\napp.listen(config.server.port, config.server.host, () => {\n  console.log(`VueSage 服务已启动: http://${config.server.host}:${config.server.port}`);\n});\n\nexport {\n  VueAnalyzer,\n  VueFixer,\n  utils\n};\n\nexport default {\n  analyze: (code) => {\n    const analyzer = new VueAnalyzer();\n    return analyzer.analyze(code);\n  },\n  \n  fix: (code, issues) => {\n    const fixer = new VueFixer();\n    return fixer.fix(code, issues);\n  }\n}; ","import { VueAnalyzer } from './tools/analyzer.js';\nimport { VueFixer } from './tools/fixer.js';\n\n/**\n * VueSage MCP服务类\n */\nexport class VueSageService {\n  constructor() {\n    this.analyzer = new VueAnalyzer();\n    this.fixer = new VueFixer();\n  }\n\n  /**\n   * 分析Vue组件\n   * @param {Object} params 请求参数\n   * @returns {Object} 分析结果\n   */\n  async analyze(component) {\n    return await this.analyzer.analyze(component);\n  }\n\n  /**\n   * 修复Vue组件问题\n   * @param {Object} params 请求参数\n   * @returns {Object} 修复结果\n   */\n  async fix(component, issues) {\n    return await this.fixer.fix(component, issues);\n  }\n\n  /**\n   * 转换问题列表为MCP格式\n   * @param {Array} issues 原始问题列表\n   * @returns {Array} MCP格式的问题列表\n   */\n  transformIssues(issues) {\n    const categories = {};\n\n    // 按类型分组\n    issues.forEach(issue => {\n      if (!categories[issue.type]) {\n        categories[issue.type] = {\n          category: this.getCategoryName(issue.type),\n          issues: []\n        };\n      }\n\n      categories[issue.type].issues.push({\n        type: issue.type,\n        severity: issue.severity,\n        message: issue.message,\n        autofix: issue.fix ? {\n          type: issue.fix,\n          description: this.getFixDescription(issue.fix)\n        } : null\n      });\n    });\n\n    return Object.values(categories);\n  }\n\n  /**\n   * 获取问题类型的显示名称\n   * @param {string} type 问题类型\n   * @returns {string} 显示名称\n   */\n  getCategoryName(type) {\n    const names = {\n      template: '模板相关',\n      script: '脚本相关',\n      style: '样式相关',\n      general: '通用问题'\n    };\n    return names[type] || type;\n  }\n\n  /**\n   * 获取修复类型的显示名称\n   * @param {string} type 修复类型\n   * @returns {string} 显示名称\n   */\n  getFixType(issue) {\n    if (issue.includes('v-for')) return 'template-vfor-key';\n    if (issue.includes('样式')) return 'style-scoped';\n    if (issue.includes('行长度')) return 'format-long-line';\n    return 'general';\n  }\n\n  /**\n   * 获取修复描述\n   * @param {string} fixType 修复类型\n   * @returns {string} 修复描述\n   */\n  getFixDescription(fixType) {\n    const descriptions = {\n      'add-v-for-key': '添加v-for的:key绑定',\n      'add-scoped-style': '添加scoped样式',\n      'format-long-line': '格式化过长的代码行',\n      'add-style-section': '添加样式部分'\n    };\n    return descriptions[fixType] || fixType;\n  }\n} "],"names":["isValidVueComponent","code","hasTemplate","test","hasScript","error","extractTemplate","match","trim","extractScript","extractStyles","styles","styleRegex","exec","fullMatch","content","scoped","includes","push","mergeVueComponent","template","script","map","style","join","VueAnalyzer","constructor","options","this","maxLineLength","requireComponentName","requirePropsType","requirePropsDefault","requireVForKey","requireScopedStyle","maxMethodLines","maxMethods","maxNestingDepth","analyze","component","success","summary","issues","type","message","analyzeTemplate","analyzeScript","analyzeStyles","analyzeLifecycle","analyzeComplexity","analyzePerformance","length","vForRegex","keyRegex","vForMatches","keyMatches","fix","split","forEach","line","index","propsMatch","prop","some","deprecatedHooks","beforeDestroy","destroyed","Object","keys","hook","oldHook","newHook","methodRegex","lines","methodCount","maxDepth","getTemplateMaxDepth","vIfCount","vShowCount","computedMatch","computedBody","watchCount","currentDepth","char","indexOf","Math","max","VueFixer","config","formatOptions","indent","repairs","filter","issue","repair","fixTemplate","fixScript","fixStyles","addVForKey","formatLongLine","addComponentName","addPropsType","addPropsDefault","fixedTemplate","fixed","beforeVFor","vForExpr","afterVFor","item","newElement","replace","exportDefaultRegex","componentName","generateComponentName","propsRegex","fixedProps","propName","propDef","part","typeMatch","getDefaultValueForType","lineNumber","parseInt","formattedLine","suffix","random","toString","substring","charAt","toUpperCase","slice","updateLifecycle","hookRegex","RegExp","refactorAsyncMount","mountedRegex","fixedBody","optimizeComputed","computedRegex","name","body","hasArrayOps","dependsOnComputed","checkComputedDependencies","hasComplexConditions","optimizeComputedBody","extractDependencies","chainMatch","chain","combineArrayOperations","parts","array","operations","filterCondition","find","op","mapTransform","allComputed","deps","Set","ref","add","Array","from","optimizeToggle","conditions","Map","vIfRegex","condition","set","complexity","analyzeConditionComplexity","frequency","estimateToggleFrequency","analysis","splitMethod","methodName","methodBody","blocks","analyzeMethodBlocks","mainMethod","helperMethods","splitMethodByBlocks","currentBlock","mainMethodLines","block","helperName","getHelperSuffix","helperMethod","blockType","extractComponent","templateContent","deepestNesting","findDeepestNesting","newComponent","elements","deepestElement","element","depth","require","port","host","app","express","vueSage","analyzer","fixer","transformIssues","categories","category","getCategoryName","severity","autofix","description","getFixDescription","values","general","getFixType","fixType","use","json","static","post","async","req","res","result","status","listen","console","log"],"mappings":"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"}